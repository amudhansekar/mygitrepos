 import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;

import java.util.List;

import java.util.Random;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.HashMap;
import java.util.Map;
import javax.swing.text.Position;
public class constructor {
	public static void main(String[] args) {
		Random rand = new Random();
		int size = rand.nextInt(10); //randomly select size for the word (need set places to put in letters)
		
		File dictionary = new File("C:/Users/vidur/Desktop/dictionary.txt"); //file with all words in english language (given by the nifty project)
		FileInputStream fis = null;
		DataInputStream dis = null;
		BufferedInputStream bis = null;
		ArrayList<String> dictionarylist = new ArrayList<String>();
		Map<Character,TreeMap<Integer, List<String>>> AlphaMap = new TreeMap<Character,TreeMap<Integer, List<String>>>();
		Map<Integer, List<String>> PosMap = new TreeMap<Integer, List<String>>();
		try {
			fis = new FileInputStream(dictionary); //all of this is ways to read from a file
			bis = new BufferedInputStream(fis);
			dis = new DataInputStream(bis);
			while (dis.available() != 0) {
				dictionarylist.add(dis.readLine());
			}
			int index = 0;
			while (index < dictionarylist.size()) {
				System.out.println(dictionarylist.get(index));
				index++;
			}
			
			fis.close();
			bis.close();
			dis.close();
			//restrict words going into alpha map and posmap to be of correct length
ã€€
			// Prepare AlphaMap
			for (int i = 0; i < dictionarylist.size(); i++) {
				
				String x = dictionarylist.get(i); //x is now a word in the dictionary list (index i)
				
				if ((x.length() != size)){ //itll check if the word is the same as the randomly generated word size, and if it is, itll proceed and add it to the map
					continue;
				}
				
				for (int j = 0; j < x.length(); j++) {
					char alpha = x.charAt(j); //alpha is now a position within x
					TreeMap<Integer, List<String>> l;
					if (AlphaMap.containsKey(alpha)) { //if the alphabet map contains one of the letters (which is character 'alpha') as a key, make 'l' the same as the value associated to character alpha
						l = AlphaMap.get(alpha);
					} else {
						l = new TreeMap<Integer, List<String>>(); // if there is no alphabet key in alphamap, make a new list l.
					}
					
					List<String> a;
					if (l.containsKey(j)){ //l is a map of position keys, and list of string values. If l already has a key, just make a associated to the value with pre-existing key
						a = l.get(j);
					} else {
						a = new ArrayList<String>(); //if no pre-existing key, just make 'a' a new list of words.
					}
					
					a.add(x); //add the word to list a.
			 l.put(j, a); // add to map l with position j, and list a
					AlphaMap.put(alpha, l); //now we want to put in the alphabet and the value map 'l' into the alphamap
			
				}				
			}
			
			// Print AlphaMap
			for (Character alpha : AlphaMap.keySet()) {
				PosMap = AlphaMap.get(alpha);
				System.out.println(alpha);
				for (Integer position : PosMap.keySet())
				{
				
				List<String> l = PosMap.get(position);
				System.out.println(position + " : " + l.size());
				}
			}			
			
			List<Character> game = new ArrayList<Character>();
			for (int i = 0; i < size; i++) //creates display with n # of empty slots (n is the same as size)
			{
				game.add('_');
				
			}			
			System.out.println(game); //prints out empty display
			System.out.println(size); //just printing out the size so I can see it
			Scanner in = new Scanner(System.in);
			List<Integer> postaken = new ArrayList<Integer>(); //list of positions taken
			List<String> wdshortlist = new ArrayList<String>(); //list of words that will work after doing things
			
			List<String> leest = new ArrayList<String>(); //
			
			// Start game
			for (int i = 0; i < 10; i++)
			{								
			 System.out.println("Enter a letter you twat");
			
			 Character a = in.next().charAt(0); //Takes in a letter and converts it into a character
			
			 TreeMap<Integer, List<String>> lettermap = AlphaMap.get(a); //Value associated with alphabet map, which is another map with the letter as a key, and positions as values.
			 int mostlength = 0;
			 int mostpos = -1;//if it has not been set, then it will be -1. we will use that to see if most pos has been set, if it has not been set, it wont work
			 int currentlength = 0;
			 if (lettermap != null)
			 	
			 {
			 	
			
			
			 	for (Integer position : lettermap.keySet()) { //for each position in the set of all position keys (in lettermap)
			 	
				 	if (postaken.contains(position)){
				 		continue;
				 	}
				 	currentlength = (lettermap.get(position)).size();
				 	
				 	
				 	if (currentlength > mostlength){//checks if currentlength is the biggest so far, if so assigns variable
				 		
				 		mostlength = currentlength;
				 		mostpos = position; //changes most pos to the position with a greater number of words (more options)
				 		leest = lettermap.get(mostpos); //add to the leest the list of all words
				 		
				 	}			 	
				 }			 	
			 	
			 	if (mostpos != -1){
			 		List<Integer> postobedeleted = new ArrayList<Integer>(); //this is going to be the list of indexes within the short list to be deleted
				 	List<String> wordsatpos = lettermap.get(mostpos); //list of words in specified positions
				 	
				 	if (wdshortlist.size() !=0) { //we want it to be filled already because in the first time we don;t want to delete anything.
				 		
				 		for (int j = 0; j < wdshortlist.size(); j++)
				 		{
				 			if (!(wordsatpos.contains(wdshortlist.get(j)))){ //if a word in the short list with index j isn't in the words list, add the index to postobedeleted so later we can delete from short list
				 				postobedeleted.add(j);
				 			}
				 		}
				 		
				 		for (int j = 0; j < postobedeleted.size(); j++ ) //goes through the postobedeleted integer list and deletes whatever integer is there.
				 		{
				 			wdshortlist.remove(postobedeleted.get(j));
				 		}
				 		currentlength = wdshortlist.size(); //size of the list (how many words in this position with this letter)
				 	} else {
				 		 currentlength = wordsatpos.size(); //basically if the shortlist hasn't been made (1st time running code) we want length to be all the words at position.
				 	}
			 	} else {
			 		continue;
			 	} ///ERROR : HERE IT CAN REMOVE EVERYTHING FROM WORDATPOS BUT STILL GO ON
			 	
			 	
			 	postaken.add(mostpos);
			 	
			 	game.set(mostpos, a); //this sets the program to display the letter in the correct position
			 	System.out.println(game);	
			 	
			 	System.out.println(a + " " + mostpos + " " + mostlength );
			 	
			 	if (wdshortlist.size() == 0 && leest != null) { //so only adds the words for the first time (dont want to keep adding into short list)
			 for (int j = 0; j < leest.size(); j++)
			 	{
			 		wdshortlist.add(leest.get(j));
			 	}
			
		 	List<String> checks = lettermap.get(mostpos); //all words at specified positions
		 	for (int j = 0; j < checks.size(); j++){
		 		if (wdshortlist.contains(checks.get(j))){
		 			continue;
		 		} else {
		 			(lettermap.get(mostpos)).remove(j);
		 	 }
		 	} 		
			 	}
			 	
			 } else { System.out.println(game);
			
			 }
			
}
			
			
			
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	
	}
}


